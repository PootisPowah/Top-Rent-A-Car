--TRIGGER THAT CALCULATES THE TOTAL AMOUNT IN PAYMENT BASED ON THE RENTAL RATE IN CAR AND
--THE INSURANCE PRICE IN PAYMENT
--THE DEPOSIT IN PAYMENT
--THE EXTRAS PRICE IN EXTRAS
--THE DIFFERENCE BETWEEN DATE PICKUP AND RETURN PICKUP MULTIPLIED BY THE RENTAL RATE

CREATE TRIGGER TR_CalculatePaymentAmount
ON PAYMENT
AFTER INSERT, UPDATE
AS
BEGIN
SET NOCOUNT ON

UPDATE PAYMENT
SET TOTAL_AMOUNT = (	
	(C.RENTAL_RATE * DATEDIFF(DAY, R.PICKUP_DATE, R.RETURN_DATE)) + 
	P.INSURANCE_PRICE + P.DEPOSIT + 
	COALESCE(EX.EXTRAS_TOTAL,0)
)
FROM PAYMENT P 
JOIN INSERTED I ON I.PAYMENT_ID = P.PAYMENT_ID
JOIN RENTAL R ON R.RENTAL_ID = P.RENTAL_ID
JOIN CAR C ON C.CAR_ID = R.CAR_ID
LEFT JOIN (
	SELECT PE.PAYMENT_ID, SUM(E.PRICE) AS EXTRAS_TOTAL
	FROM PAYMENT_EXTRAS PE JOIN EXTRAS E ON E.EXTRA_ID = PE.EXTRA_ID
	GROUP BY PE.PAYMENT_ID
) EX ON EX.PAYMENT_ID = P.PAYMENT_ID
END


-- UPDATE THE AVAILABILITY OF CARS BASED ON THE PICKUP OR RETURN DATE
CREATE TRIGGER TR_UpdateCarAvailability
ON RENTAL
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE R
    SET R.STATUS_ID = CASE
        WHEN i.RETURN_DATE < GETDATE() AND R.STATUS_ID != 2 THEN 3  -- COMPLETED, BUT NOT CANCELED
        
        
        WHEN i.PICKUP_DATE <= GETDATE() AND R.STATUS_ID != 2 THEN 1  -- ACTIVE, BUT NOT CANCELED
        
        WHEN i.PICKUP_DATE > GETDATE() AND R.STATUS_ID != 2 THEN 4  -- PENDING, BUT NOT CANCELED
        
        -- DON'T CHANGE IF ALREADY CANCELED
        ELSE R.STATUS_ID
    END
    FROM RENTAL R
    JOIN INSERTED i ON R.RENTAL_ID = i.RENTAL_ID
    WHERE i.RENTAL_ID IN (SELECT RENTAL_ID FROM INSERTED);  -- APPLY TO NEWLY UPDATED OR INSERTED 

    -- UPDATE CAR AVAILABILITY BASED ON RETURN DATE
    UPDATE CAR
    SET IS_AVAILABLE = CASE
        --AVAILABLE AFTER RETURN DATE HAS PASSED
        WHEN i.RETURN_DATE < GETDATE() THEN 1
        
        ELSE 0  
    END
    FROM CAR c
    JOIN INSERTED i ON c.CAR_ID = i.CAR_ID
    WHERE i.RENTAL_ID IN (SELECT RENTAL_ID FROM INSERTED) -- APPLY TO NEWLY UPDATED OR INSERTED 
END



-- Update the RENTAL table with an employee from the pickup office
CREATE TRIGGER TR_AssignEmployee
ON RENTAL
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON

    
    UPDATE RENTAL
    SET EMPLOYEE_ID = (
        SELECT TOP 1 EMPLOYEE_ID
        FROM EMPLOYEE
        WHERE OFFICE_ID = i.PICKUP_OFFICE
        ORDER BY EMPLOYEE_ID
    )
    FROM RENTAL r
    JOIN INSERTED i ON r.RENTAL_ID = i.RENTAL_ID
    WHERE r.EMPLOYEE_ID IS NULL
END




