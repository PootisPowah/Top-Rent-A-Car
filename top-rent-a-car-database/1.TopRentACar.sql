CREATE DATABASE RentACarDB
USE RentACarDB



---CUSTOMER--------
CREATE TABLE CUSTOMER(
CUSTOMER_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
FIRST_NAME VARCHAR(50) NOT NULL,
LAST_NAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(20) NOT NULL UNIQUE,
PASSWORD VARCHAR(20)  NOT NULL,
BIRTH_DATE DATE NOT NULL CHECK(BIRTH_DATE <= GETDATE()),
PHONE VARCHAR(15) NOT NULL CHECK (PHONE LIKE '[0-9]%'), 
DRIVERS_LICENSE_NUMBER VARCHAR(12) NOT NULL UNIQUE,
ID_CARD_NUMBER VARCHAR(12) NOT NULL UNIQUE
)


---CAR--------
CREATE TABLE CAR (
CAR_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
BRAND VARCHAR(50) NOT NULL,
MODEL VARCHAR(50) NOT NULL,
TYPE VARCHAR(20) NOT NULL,
FUEL VARCHAR(20) NOT NULL,
GEARBOX VARCHAR(20) NOT NULL,
DOORS INT NOT NULL CHECK (DOORS >= 0), 
SEATS INT NOT NULL CHECK (SEATS >= 0),  
HORSE_POWER INT NOT NULL CHECK (HORSE_POWER >= 0), 
FUEL_CONSUMPTION DECIMAL(5,2) NOT NULL CHECK (FUEL_CONSUMPTION >= 0), 
RESERVOIR_CAPACITY INT NOT NULL CHECK (RESERVOIR_CAPACITY >= 0),  
PRODUCTION_YEAR INT NOT NULL,
MIN_AGE_REQUIREMENT INT NOT NULL CHECK (MIN_AGE_REQUIREMENT >= 0),  
TRUNK_SPACE DECIMAL(6,2) NOT NULL CHECK (TRUNK_SPACE >= 0),  
RENTAL_RATE DECIMAL(8,2) NOT NULL CHECK (RENTAL_RATE >= 0),  
IS_AVAILABLE BIT DEFAULT 1
)



---ADDRESS--------
CREATE TABLE ADDRESS (
ADDRESS_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
COUNTRY_CODE VARCHAR(3) NOT NULL CHECK (COUNTRY_CODE LIKE '[A-Z][A-Z]'), 
CITY VARCHAR(50) NOT NULL, 
STREET_NAME VARCHAR(100) NOT NULL,  
STREET_NUMBER VARCHAR(10) NOT NULL CHECK (STREET_NUMBER LIKE '%[0-9]%') 
)

---OFFICE--------
CREATE TABLE OFFICE (
OFFICE_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
REGION VARCHAR(50) NOT NULL,  
ADDRESS_ID INT NOT NULL UNIQUE,
PHONE VARCHAR(15) NOT NULL CHECK (PHONE LIKE '[0-9]%'),  
FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
)

---EMPLOYEE--------
CREATE TABLE EMPLOYEE(
EMPLOYEE_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
OFFICE_ID INT NOT NULL,
EMAIL VARCHAR(20) NOT NULL,
PASSWORD VARCHAR(20) NOT NULL,
FIRST_NAME VARCHAR(20) NOT NULL,
LAST_NAME VARCHAR(20) NOT NULL,
PHONE VARCHAR(15) NOT NULL CHECK (PHONE LIKE '[0-9]%'),  
BIRTH_DATE DATE NOT NULL CHECK(BIRTH_DATE <= GETDATE()),
FOREIGN KEY(OFFICE_ID) REFERENCES OFFICE(OFFICE_ID)
)

---STATUS--------
CREATE TABLE STATUS(
STATUS_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
STATUS_NAME VARCHAR(10) NOT NULL CHECK(STATUS_NAME IN ('ACTIVE', 'COMPLETED','CANCELED', 'PENDING')),
STATUS_DESC VARCHAR(255)
)



---EXTRAS--------
CREATE TABLE EXTRAS(
EXTRA_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
NAME VARCHAR(20) NOT NULL,
DESCRIPTION VARCHAR(255),
PRICE DECIMAL(8,2) NOT NULL CHECK (PRICE >= 0),
)

---RENTAL--------
CREATE TABLE RENTAL(
RENTAL_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
CUSTOMER_ID INT NOT NULL,
CAR_ID INT NOT NULL,
EMPLOYEE_ID INT NOT NULL,
STATUS_ID INT NULL,
PICKUP_DATE DATE NOT NULL CHECK(PICKUP_DATE >= GETDATE()),
RETURN_DATE DATE NOT NULL ,
PICKUP_TIME TIME NOT NULL,
RETURN_TIME TIME NOT NULL,
PICKUP_OFFICE INT NOT NULL,
RETURN_OFFICE INT NOT NULL,
CHECK(RETURN_DATE >= PICKUP_DATE),
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
FOREIGN KEY(CAR_ID) REFERENCES CAR(CAR_ID),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
FOREIGN KEY(STATUS_ID) REFERENCES STATUS(STATUS_ID),
FOREIGN KEY(PICKUP_OFFICE) REFERENCES OFFICE(OFFICE_ID),
FOREIGN KEY(RETURN_OFFICE) REFERENCES OFFICE(OFFICE_ID)
)


---PAYMENT--------
CREATE TABLE PAYMENT(
PAYMENT_ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
RENTAL_ID INT NOT NULL,
PAYMENT_METHOD VARCHAR(10) NOT NULL CHECK(PAYMENT_METHOD IN ('Card', 'Cash')),
PAYMENT_DATE DATETIME,
INSURANCE_PRICE DECIMAL(6,2) NOT NULL,
DEPOSIT DECIMAL(6,2) NOT NULL CHECK(DEPOSIT >= 0),
TOTAL_AMOUNT DECIMAL(8,2) NOT NULL CHECK(TOTAL_AMOUNT >= 0),
FOREIGN KEY(RENTAL_ID) REFERENCES RENTAL(RENTAL_ID),
)

 

---PAYMENT_EXTRAS------
CREATE TABLE PAYMENT_EXTRAS (
PAYMENT_ID INT,
EXTRA_ID INT,
PRIMARY KEY (PAYMENT_ID, EXTRA_ID),
FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID),
FOREIGN KEY (EXTRA_ID) REFERENCES EXTRAS(EXTRA_ID)
)


